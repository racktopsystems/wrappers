#!/bin/sh
# Copyright 2009-2016 RackTop Systems Inc. and/or its affiliates.
# http://www.racktopsystems.com
#
# The methods and techniques utilized herein are considered TRADE SECRETS
# and/or CONFIDENTIAL unless otherwise noted. REPRODUCTION or DISTRIBUTION
# is FORBIDDEN, in whole and/or in part, except by express written permission
# of RackTop Systems.
#
# @@DESCRIPTION@@  A minimal wrapper encapsulating steps to create AFP share
# @@NAME@@         hac-create
# @@STABILITY@@    unstable
# @@VERSION@@      1.0.0

# If this was enabled via envvar. enable tracing globally and in functions.
DEBUG="${DEBUG:-0}"
[[ "${DEBUG}" -gt 0 ]] && set -o xtrace
typeset -A share
# What we expect as arguments to this script is a JSON object that describes
# share being created.

# JSON:
#
# {
#   "name": "somename",
#   "allowed_users": ["user1", "user2", "user3", "user4"],
#   "allowed_groups": ["group1", "group2", "group3", "group4"]
# }

if [[ -z $1 ]] ; then exit 1 ; fi

POOL=p01
ROOTDS=${POOL}/global
AGPROP='hac:acl:allowed_groups'
AUPROP='hac:acl:allowed_users'
ERR_UNSPECIFIED_FAILURE=1
ERR_CREATE_DATASET=100
ERR_ALLOW_ACCESS=101
ERR_ENABLE_SHARE=102
OUTPUT=/dev/stdout
# These are meant to be adjusted to best suit the API.
STATUS_BAD="failed"
STATUS_GOOD="ok"

# mkdataset creates actual backbone, a dataset which we will expose
# with given name via AFP. We create it here, and then let afpadm handle rest.
function mkdataset {
  [[ "${DEBUG}" -gt 0 ]] && set -o xtrace

  if ! `zfs list "${ROOTDS}/${share[name]}" >/dev/null 2>&1`; then
    /usr/sbin/zfs create \
      -o aclinherit='passthrough' \
      -o aclmode='passthrough' \
      -o atime='on' \
      -o canmount='on' \
      -o checksum='fletcher4' \
      -o compression='lz4' \
      -o copies='1' \
      -o dedup='off' \
      -o devices='on' \
      -o exec='on' \
      -o filesystem_limit='none' \
      -o logbias='latency' \
      -o nbmand='off' \
      -o casesensitivity='mixed' \
      -o normalization='none' \
      -o utf8only='off' \
      -o primarycache='all' \
      -o readonly='off' \
      -o recordsize='131072' \
      -o redundant_metadata='all' \
      -o secondarycache='all' \
      -o setuid='on' \
      -o snapdir='hidden' \
      -o snapshot_limit='none' \
      -o sync='standard' \
      -o vscan='off' \
      -o xattr='on' \
      -o zoned='off' \
      -o racktop:storage_profile='general_filesystem' \
      -o racktop:encoded_description='created via HAC API call' \
      -o "${AGPROP}"="${share[ag]}" \
      -o "${AUPROP}"="${share[au]}" \
      "${ROOTDS}/${share[name]}"
  else
    # We already have a dataset, so we assume we are only adjusting access,
    # i.e. changing user or group property fields, and setting access controls
    # accordingly on the data.
    /usr/sbin/zfs set \
      "${AGPROP}"="${share[ag]}" \
      "${AUPROP}"="${share[au]}" \
      "${ROOTDS}/${share[name]}"
  fi

  return $?
}


function chmod_dataset {
  [[ "${DEBUG}" -gt 0 ]] && set -o xtrace
  idx=2
  rc=0
  groups=`/usr/sbin/zfs get -Hovalue "${AGPROP}" "${ROOTDS}/${share[name]}"`
  users=`/usr/sbin/zfs get -Hovalue "${AUPROP}" "${ROOTDS}/${share[name]}"`
  chmod A0=owner@:rwxpdDaARWcCos:fd-----:allow \
      /storage/${ROOTDS}/${share[name]}
  chmod A1=group@:r-x---a-R-c--s:fd-----:allow \
      /storage/${ROOTDS}/${share[name]}

  # Process groups and then process users, groups will be higher
  # in othe ACL ordering.
  # for grp in `/usr/sbin/zfs get -Hovalue "${AGPROP}" \
  # "${ROOTDS}/${share[name]}" | tr ',' ' '`; do
  #
  # Attempt to replace ACL first, which will only succeed if there is
  # already an entry at that index in the array. If this fails we try
  # to instead add entry with given index.
  # We are using the odd { rc=$? ; continue ; } syntax to group actions,
  # which in this case is setting of return code and terminating this
  # loop iteration. We don't want to increment index counter any time we
  # do not successfully set ACL entry.
  #
  # We trust chmod here to handle failure gracefully. We don't make any
  # attempts to handle it ourselves, short of not incrementing index for
  # ACL position on failure.
  if [[ ! -z "${groups}" ]]; then
    for g in `tr ',' ' ' <<< "${groups}"`; do
      chmod A${idx}=group:${g}:rwxpdDaARWcCos:fd----I:allow \
        /storage/${ROOTDS}/${share[name]} 2>/dev/null || \
      chmod A${idx}+group:${g}:rwxpdDaARWcCos:fd----I:allow \
        /storage/${ROOTDS}/${share[name]} 2>/dev/null || \
        { rc=$? ; continue ; }
      idx=$(( idx + 1 ))
    done
  fi

  if [[ ! -z "${users}" ]]; then
    for u in `tr ',' ' ' <<< "${users}"`; do
      chmod A${idx}=user:${u}:rwxpdDaARWcCos:fd----I:allow \
        /storage/${ROOTDS}/${share[name]} 2>/dev/null || \
      chmod A${idx}+user:${u}:rwxpdDaARWcCos:fd----I:allow \
        /storage/${ROOTDS}/${share[name]} 2>/dev/null || \
        { rc=$? ; continue ; }
      idx=$(( idx + 1 ))
    done
  fi

  return "${rc}"
}

function setup_afp_share {
  [[ "${DEBUG}" -gt 0 ]] && set -o xtrace

  # If does not already exist create, otherwise we are modifying.
  # Currently we don't have much control over the share, for example,
  # we cannot rename a share at this moment via this interface.
  if [[ -z `/usr/racktop/sbin/afpadm s s "${share[name]}"` ]]; then
    /usr/racktop/sbin/afpadm s c \
      "${ROOTDS}/${share[name]}" \
      --name "${share[name]}"
    return $?
  fi

  return 0
}

share["name"]=`jq -r '.name' <<< $1`
share["ag"]=`jq -r '.allowed_groups[]' 2>/dev/null <<< $1 | paste -s -d \,`
share["au"]=`jq -r '.allowed_users[]'  2>/dev/null <<< $1 | paste -s -d \,`

# If there are no members in either or both arrays, we simply don't
# apply any access controls to the share being created.

function return_err {
  [[ "${DEBUG}" -gt 0 ]] && set -o xtrace
  # Resulting object should look something like this:
  # {"status": "ok", "retcode": 0}
  # {"status": "failed", "retcode": 100}
  status=$1
  rc=$2
  msg=$3
  cat >"${OUTPUT}" <<EOF
  {
    "status": "$status",
    "retcode": $rc,
    "errtext": "$msg"
  }
EOF
}

# Need to add handling in cases where we can undo what was done, rollback
# essentially, so as to not leave things in partially incomplete state.
if ! mkdataset ; then
  return_err "${STATUS_BAD}" "${ERR_CREATE_DATASET}" ; exit "${rc}" ; fi

if ! chmod_dataset ; then
  return_err "${STATUS_BAD}" "${ERR_ALLOW_ACCESS}" "Unable to setup ACL. Check validity of groups and users being granted access."; exit "${rc}" ; fi

if ! setup_afp_share ; then
  return_err "${STATUS_BAD}" "${ERR_ENABLE_SHARE}" ; exit "${rc}" ; fi

# We are at the end of all steps, as such we know everything worked as expected.
# Now return a sucess message to caller.
return_err "${STATUS_GOOD}" 0
